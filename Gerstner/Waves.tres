[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode diffuse_lambert;
render_mode world_vertex_coords;

const float PI = 3.1459f;

uniform vec4 WaveA = vec4(1,0,0.25,10);
uniform vec4 WaveB = vec4(1,1,0.25,10);
uniform vec4 WaveC = vec4(1,1.3,.2,18);
uniform vec4 WaveD = vec4(1,2,.2,18);

uniform vec3 albedo = vec3(0,0,255);
uniform float metallic = 0;
uniform float roughness = 0;

varying vec3 color;

vec3 GerstnerWave(vec4 wave, vec3 p, inout vec3 tangent, inout vec3 binormal) {
	
	float steepness = wave.z;
	float wavelength = wave.w;
	float k = 2f * PI / wavelength;
	float c = sqrt(9.8/k);
	vec2 d = normalize(wave.xy);
	float f = k * (dot(d, p.xz) - c * TIME);
	float a = steepness / k;
	
	tangent += vec3(
				-d.x * d.x * (steepness * sin(f)),
				d.x * (steepness * cos(f)),
				-d.x * d.y * (steepness * sin(f))
			);
	binormal += vec3(
				-d.x * d.y * (steepness * sin(f)),
				d.y * (steepness * cos(f)),
				-d.y * d.y * (steepness * sin(f))
			);
	return vec3(
				d.x * (a * cos(f)),
				a * sin(f),
				d.y * (a * cos(f))
			);
}

void fragment() {
	METALLIC = metallic;
	ALBEDO = color;
	ROUGHNESS = roughness;
}

void vertex() {
	vec3 gridPoint = VERTEX;
	TANGENT = vec3(1, 0, 0);
	BINORMAL = vec3(0, 0, 1);
	float distanceFromSeaLevel = gridPoint.y;
	vec3 p = gridPoint;
	p += GerstnerWave(WaveA, gridPoint, TANGENT, BINORMAL);
	p += GerstnerWave(WaveB, gridPoint, TANGENT, BINORMAL);
	p += GerstnerWave(WaveC, gridPoint, TANGENT, BINORMAL);
	p += GerstnerWave(WaveD, gridPoint, TANGENT, BINORMAL);
	float coloradd = .25f*(p.y - distanceFromSeaLevel);
	color = vec3(albedo.x + (coloradd + abs(coloradd)),albedo.y + (coloradd + abs(coloradd)),albedo.z);
	NORMAL = normalize(cross(BINORMAL, TANGENT));
	
	VERTEX = p;
}"

[resource]
shader = SubResource( 1 )
shader_param/WaveA = Plane( 1, 0, 0.2, 7 )
shader_param/WaveB = Plane( 1, -1, 0.2, 10 )
shader_param/WaveC = Plane( 1, -1, 0.1, 0.1 )
shader_param/WaveD = Plane( 1, 0.8, 0.3, 10 )
shader_param/albedo = Vector3( 0, 0.4, 0.96 )
shader_param/metallic = 0.0
shader_param/roughness = 0.25
